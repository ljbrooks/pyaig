// Note: The license below is based on the template at:
// http://opensource.org/licenses/BSD-3-Clause
// Copyright (C) 2020 Regents of the University of Texas
//All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

// o Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.

// o Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.

// o Neither the name of the copyright holders nor the names of its
//   contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Original Author(s):
// Mertcan Temel         <mert@utexas.edu>

// DO NOT REMOVE:
// This file is generated by Temel's multiplier generator. Download from https://github.com/temelmertcan/multgen.

module DT_UB2_RP_8x8_noX(
        input logic [7:0] IN1,
        input logic [7:0] IN2,
        output logic [15:0] result);
    
    
// Creating Partial Products 

    wire [8:0] mult = {1'b0, IN1};
    wire [8:0] mcand = {1'b0, IN2};
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[0] 1'b0
    wire logic select_e_0, tcomp0, select_ne_0;
    assign select_e_0 = ~mult[0] & 1'b0;
    assign select_ne_0 = mult[0] & ~1'b0;
    wire [8:0] pp_0;
    assign pp_0 = (1<<8) ^ // flip the MSB 
                   ((select_e_0 ? mcand : 0) | 
                    (select_ne_0 ? (~ mcand) : 0)); 
    assign tcomp0 = select_ne_0;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[1] mult[0]
    wire logic select_e_1, tcomp1, select_ne_1;
    assign select_e_1 = ~mult[1] & mult[0];
    assign select_ne_1 = mult[1] & ~mult[0];
    wire [8:0] pp_1;
    assign pp_1 = (1<<8) ^ // flip the MSB 
                   ((select_e_1 ? mcand : 0) | 
                    (select_ne_1 ? (~ mcand) : 0)); 
    assign tcomp1 = select_ne_1;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[2] mult[1]
    wire logic select_e_2, tcomp2, select_ne_2;
    assign select_e_2 = ~mult[2] & mult[1];
    assign select_ne_2 = mult[2] & ~mult[1];
    wire [8:0] pp_2;
    assign pp_2 = (1<<8) ^ // flip the MSB 
                   ((select_e_2 ? mcand : 0) | 
                    (select_ne_2 ? (~ mcand) : 0)); 
    assign tcomp2 = select_ne_2;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[3] mult[2]
    wire logic select_e_3, tcomp3, select_ne_3;
    assign select_e_3 = ~mult[3] & mult[2];
    assign select_ne_3 = mult[3] & ~mult[2];
    wire [8:0] pp_3;
    assign pp_3 = (1<<8) ^ // flip the MSB 
                   ((select_e_3 ? mcand : 0) | 
                    (select_ne_3 ? (~ mcand) : 0)); 
    assign tcomp3 = select_ne_3;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[4] mult[3]
    wire logic select_e_4, tcomp4, select_ne_4;
    assign select_e_4 = ~mult[4] & mult[3];
    assign select_ne_4 = mult[4] & ~mult[3];
    wire [8:0] pp_4;
    assign pp_4 = (1<<8) ^ // flip the MSB 
                   ((select_e_4 ? mcand : 0) | 
                    (select_ne_4 ? (~ mcand) : 0)); 
    assign tcomp4 = select_ne_4;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[5] mult[4]
    wire logic select_e_5, tcomp5, select_ne_5;
    assign select_e_5 = ~mult[5] & mult[4];
    assign select_ne_5 = mult[5] & ~mult[4];
    wire [8:0] pp_5;
    assign pp_5 = (1<<8) ^ // flip the MSB 
                   ((select_e_5 ? mcand : 0) | 
                    (select_ne_5 ? (~ mcand) : 0)); 
    assign tcomp5 = select_ne_5;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[6] mult[5]
    wire logic select_e_6, tcomp6, select_ne_6;
    assign select_e_6 = ~mult[6] & mult[5];
    assign select_ne_6 = mult[6] & ~mult[5];
    wire [8:0] pp_6;
    assign pp_6 = (1<<8) ^ // flip the MSB 
                   ((select_e_6 ? mcand : 0) | 
                    (select_ne_6 ? (~ mcand) : 0)); 
    assign tcomp6 = select_ne_6;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[7] mult[6]
    wire logic select_e_7, tcomp7, select_ne_7;
    assign select_e_7 = ~mult[7] & mult[6];
    assign select_ne_7 = mult[7] & ~mult[6];
    wire [8:0] pp_7;
    assign pp_7 = (1<<8) ^ // flip the MSB 
                   ((select_e_7 ? mcand : 0) | 
                    (select_ne_7 ? (~ mcand) : 0)); 
    assign tcomp7 = select_ne_7;
    
    // Booth Radix-2 Partial Products. Multiplier selectors: mult[8] mult[7]
    wire logic select_e_8, tcomp8, select_ne_8;
    assign select_e_8 = ~mult[8] & mult[7];
    assign select_ne_8 = mult[8] & ~mult[7];
    wire [8:0] pp_8;
    assign pp_8 = (1<<8) ^ // flip the MSB 
                   ((select_e_8 ? mcand : 0) | 
                    (select_ne_8 ? (~ mcand) : 0)); 
    assign tcomp8 = select_ne_8;
    
    // The values to be summed in the summation tree, from LSB (left) to MSB:
     // pp_0[0] pp_0[1] pp_0[2] pp_0[3] pp_0[4] pp_0[5] pp_0[6] pp_0[7] pp_0[8]   --      --      --      --      --      --      --      --      --    
     //   --    pp_1[0] pp_1[1] pp_1[2] pp_1[3] pp_1[4] pp_1[5] pp_1[6] pp_1[7] pp_1[8]   --      --      --      --      --      --      --      --    
     //   --      --    pp_2[0] pp_2[1] pp_2[2] pp_2[3] pp_2[4] pp_2[5] pp_2[6] pp_2[7] pp_2[8]   --      --      --      --      --      --      --    
     //   --      --      --    pp_3[0] pp_3[1] pp_3[2] pp_3[3] pp_3[4] pp_3[5] pp_3[6] pp_3[7] pp_3[8]   --      --      --      --      --      --    
     //   --      --      --      --    pp_4[0] pp_4[1] pp_4[2] pp_4[3] pp_4[4] pp_4[5] pp_4[6] pp_4[7] pp_4[8]   --      --      --      --      --    
     //   --      --      --      --      --    pp_5[0] pp_5[1] pp_5[2] pp_5[3] pp_5[4] pp_5[5] pp_5[6] pp_5[7] pp_5[8]   --      --      --      --    
     //   --      --      --      --      --      --    pp_6[0] pp_6[1] pp_6[2] pp_6[3] pp_6[4] pp_6[5] pp_6[6] pp_6[7] pp_6[8]   --      --      --    
     //   --      --      --      --      --      --      --    pp_7[0] pp_7[1] pp_7[2] pp_7[3] pp_7[4] pp_7[5] pp_7[6] pp_7[7] pp_7[8]   --      --    
     //   --      --      --      --      --      --      --      --    pp_8[0] pp_8[1] pp_8[2] pp_8[3] pp_8[4] pp_8[5] pp_8[6] pp_8[7] pp_8[8]   --    
     // tcomp0  tcomp1  tcomp2  tcomp3  tcomp4  tcomp5  tcomp6  tcomp7  tcomp8    --      --      --      --      --      --      --      --      --    
     //   --      --      --      --      --      --      --      --    1'b1      --      --      --      --      --      --      --      --    1'b1    
    
// Creating Summation Tree 

    
    // Dadda Summation Stage 1
    logic s0 ,c0; 
    fa fa0 (pp_0[8], pp_1[7], pp_2[6], s0, c0);
    
    // Dadda Summation Stage 2
    logic s1 ,c1;
    ha ha1 (pp_0[5], pp_1[4], s1, c1);
    logic s2 ,c2; 
    fa fa2 (pp_0[6], pp_1[5], pp_2[4], s2, c2);
    logic s3 ,c3;
    ha ha3 (pp_3[3], pp_4[2], s3, c3);
    logic s4 ,c4; 
    fa fa4 (pp_0[7], pp_1[6], pp_2[5], s4, c4);
    logic s5 ,c5; 
    fa fa5 (pp_3[4], pp_4[3], pp_5[2], s5, c5);
    logic s6 ,c6;
    ha ha6 (pp_6[1], pp_7[0], s6, c6);
    logic s7 ,c7; 
    fa fa7 (pp_3[5], pp_4[4], pp_5[3], s7, c7);
    logic s8 ,c8; 
    fa fa8 (pp_6[2], pp_7[1], pp_8[0], s8, c8);
    logic s9 ,c9; 
    fa fa9 (tcomp8, 1'b1, s0, s9, c9);
    logic s10 ,c10; 
    fa fa10 (pp_1[8], pp_2[7], pp_3[6], s10, c10);
    logic s11 ,c11; 
    fa fa11 (pp_4[5], pp_5[4], pp_6[3], s11, c11);
    logic s12 ,c12; 
    fa fa12 (pp_7[2], pp_8[1], c0, s12, c12);
    logic s13 ,c13; 
    fa fa13 (pp_2[8], pp_3[7], pp_4[6], s13, c13);
    logic s14 ,c14; 
    fa fa14 (pp_5[5], pp_6[4], pp_7[3], s14, c14);
    logic s15 ,c15; 
    fa fa15 (pp_3[8], pp_4[7], pp_5[6], s15, c15);
    
    // Dadda Summation Stage 3
    logic s16 ,c16;
    ha ha16 (pp_0[3], pp_1[2], s16, c16);
    logic s17 ,c17; 
    fa fa17 (pp_0[4], pp_1[3], pp_2[2], s17, c17);
    logic s18 ,c18;
    ha ha18 (pp_3[1], pp_4[0], s18, c18);
    logic s19 ,c19; 
    fa fa19 (pp_2[3], pp_3[2], pp_4[1], s19, c19);
    logic s20 ,c20; 
    fa fa20 (pp_5[0], tcomp5, s1, s20, c20);
    logic s21 ,c21; 
    fa fa21 (pp_5[1], pp_6[0], tcomp6, s21, c21);
    logic s22 ,c22; 
    fa fa22 (c1, s2, s3, s22, c22);
    logic s23 ,c23; 
    fa fa23 (tcomp7, c2, c3, s23, c23);
    logic s24 ,c24; 
    fa fa24 (s4, s5, s6, s24, c24);
    logic s25 ,c25; 
    fa fa25 (c4, c5, c6, s25, c25);
    logic s26 ,c26; 
    fa fa26 (s7, s8, s9, s26, c26);
    logic s27 ,c27; 
    fa fa27 (c7, c8, c9, s27, c27);
    logic s28 ,c28; 
    fa fa28 (s10, s11, s12, s28, c28);
    logic s29 ,c29; 
    fa fa29 (pp_8[2], c10, c11, s29, c29);
    logic s30 ,c30; 
    fa fa30 (c12, s13, s14, s30, c30);
    logic s31 ,c31; 
    fa fa31 (pp_6[5], pp_7[4], pp_8[3], s31, c31);
    logic s32 ,c32; 
    fa fa32 (c13, c14, s15, s32, c32);
    logic s33 ,c33; 
    fa fa33 (pp_4[8], pp_5[7], pp_6[6], s33, c33);
    logic s34 ,c34; 
    fa fa34 (pp_7[5], pp_8[4], c15, s34, c34);
    logic s35 ,c35; 
    fa fa35 (pp_5[8], pp_6[7], pp_7[6], s35, c35);
    
    // Dadda Summation Stage 4
    logic s36 ,c36;
    ha ha36 (pp_0[2], pp_1[1], s36, c36);
    logic s37 ,c37; 
    fa fa37 (pp_2[1], pp_3[0], tcomp3, s37, c37);
    logic s38 ,c38; 
    fa fa38 (tcomp4, c16, s17, s38, c38);
    logic s39 ,c39; 
    fa fa39 (c17, c18, s19, s39, c39);
    logic s40 ,c40; 
    fa fa40 (c19, c20, s21, s40, c40);
    logic s41 ,c41; 
    fa fa41 (c21, c22, s23, s41, c41);
    logic s42 ,c42; 
    fa fa42 (c23, c24, s25, s42, c42);
    logic s43 ,c43; 
    fa fa43 (c25, c26, s27, s43, c43);
    logic s44 ,c44; 
    fa fa44 (c27, c28, s29, s44, c44);
    logic s45 ,c45; 
    fa fa45 (c29, c30, s31, s45, c45);
    logic s46 ,c46; 
    fa fa46 (c31, c32, s33, s46, c46);
    logic s47 ,c47; 
    fa fa47 (pp_8[5], c33, c34, s47, c47);
    logic s48 ,c48; 
    fa fa48 (pp_6[8], pp_7[7], pp_8[6], s48, c48);
    
    // Dadda Summation Stage 5
    logic s49 ,c49;
    ha ha49 (pp_0[1], pp_1[0], s49, c49);
    logic s50 ,c50; 
    fa fa50 (pp_2[0], tcomp2, s36, s50, c50);
    logic s51 ,c51; 
    fa fa51 (s16, c36, s37, s51, c51);
    logic s52 ,c52; 
    fa fa52 (s18, c37, s38, s52, c52);
    logic s53 ,c53; 
    fa fa53 (s20, c38, s39, s53, c53);
    logic s54 ,c54; 
    fa fa54 (s22, c39, s40, s54, c54);
    logic s55 ,c55; 
    fa fa55 (s24, c40, s41, s55, c55);
    logic s56 ,c56; 
    fa fa56 (s26, c41, s42, s56, c56);
    logic s57 ,c57; 
    fa fa57 (s28, c42, s43, s57, c57);
    logic s58 ,c58; 
    fa fa58 (s30, c43, s44, s58, c58);
    logic s59 ,c59; 
    fa fa59 (s32, c44, s45, s59, c59);
    logic s60 ,c60; 
    fa fa60 (s34, c45, s46, s60, c60);
    logic s61 ,c61; 
    fa fa61 (s35, c46, s47, s61, c61);
    logic s62 ,c62; 
    fa fa62 (c35, c47, s48, s62, c62);
    logic s63 ,c63; 
    fa fa63 (pp_7[8], pp_8[7], c48, s63, c63);
    
    logic [16:0] adder_result;
    RP_16 final_adder ({c62, c61, c60, c59, c58, c57, c56, c55, c54, c53, c52, c51, c50, c49, tcomp1, pp_0[0] }, {s63, s62, s61, s60, s59, s58, s57, s56, s55, s54, s53, s52, s51, s50, s49, tcomp0 }, adder_result );
    assign result[15:0] = adder_result[15:0];
endmodule



module RP_16 ( 
        input logic [15:0] IN1,
        input logic [15:0] IN2,
        output logic [16:0] OUT);
    
    logic C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16;
    ha m0 (IN1[0], IN2[0], OUT[0], C0);
    fa m1 (IN1[1], IN2[1], C0, OUT[1], C1);
    fa m2 (IN1[2], IN2[2], C1, OUT[2], C2);
    fa m3 (IN1[3], IN2[3], C2, OUT[3], C3);
    fa m4 (IN1[4], IN2[4], C3, OUT[4], C4);
    fa m5 (IN1[5], IN2[5], C4, OUT[5], C5);
    fa m6 (IN1[6], IN2[6], C5, OUT[6], C6);
    fa m7 (IN1[7], IN2[7], C6, OUT[7], C7);
    fa m8 (IN1[8], IN2[8], C7, OUT[8], C8);
    fa m9 (IN1[9], IN2[9], C8, OUT[9], C9);
    fa m10 (IN1[10], IN2[10], C9, OUT[10], C10);
    fa m11 (IN1[11], IN2[11], C10, OUT[11], C11);
    fa m12 (IN1[12], IN2[12], C11, OUT[12], C12);
    fa m13 (IN1[13], IN2[13], C12, OUT[13], C13);
    fa m14 (IN1[14], IN2[14], C13, OUT[14], C14);
    fa m15 (IN1[15], IN2[15], C14, OUT[15], C15);
    assign OUT[16] = C15;

endmodule

module ha (
        input logic a,
        input logic b,
        output logic s,
        output logic c);
    
    assign s = a ^ b;
    assign c = a & b;
endmodule



module fa (
        input logic x,
        input logic y,
        input logic z,
        output logic s,
        output logic c);
    
    assign s = x ^ y ^ z;
    assign c = (x & y) | (x & z) | (y & z);
endmodule

module Four2Two 
        #(parameter WIDTH=1) (
        input logic [WIDTH-1:0] in1,
        input logic [WIDTH-1:0] in2,
        input logic [WIDTH-1:0] in3,
        input logic [WIDTH-1:0] in4,
        input logic cin,
        output logic [WIDTH-1:0] sum,
        output logic [WIDTH-1:0] carry,
        output logic cout);
    
    wire logic [WIDTH:0] temp1;
    assign temp1 = {((in1 ^ in2)&in3 | in1 & ~(in1^in2)),cin};
    assign sum = ((in1 ^ in2) ^ in3 ^ in4) ^ temp1[WIDTH-1:0];
    assign carry = ((in1 ^ in2) ^ in3 ^ in4) & temp1[WIDTH-1:0] | in4 & ~((in1 ^ in2) ^ in3 ^ in4);
    assign cout = temp1[WIDTH];
endmodule




